#pragma once

#include <vulkan/vulkan.hpp>
#include <boost/predef.h>

#define DRAGON_ENGINE_NAME "DragonEngine"
#define DRAGON_ENGINE_VERSION VK_MAKE_API_VERSION(0, @DragonEngine_VERSION_MAJOR@, @DragonEngine_VERSION_MINOR@, @DragonEngine_VERSION_PATCH@)
#define VERSION(major, minor, patch) VK_MAKE_API_VERSION(0, major, minor, patch)

/* DGAPI is used to declare public API functions for export
 * from the DLL / shared library / dynamic library.
 */
#if defined(_WIN32) && defined(_DRAGON_BUILD_DLL)
 /* We are building Dragon as a Win32 DLL */
 #define DGAPI __declspec(dllexport)
#elif defined(_WIN32) && defined(DRAGON_DLL)
 /* We are calling a GLFW Win32 DLL */
 #define DGAPI __declspec(dllimport)
#elif defined(__GNUC__) && defined(_DRAGON_BUILD_DLL)
 /* We are building GLFW as a Unix shared library */
 #define DGAPI __attribute__((visibility("default")))
#else
 #define DGAPI
#endif